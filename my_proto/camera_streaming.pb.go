// Code generated by protoc-gen-go. DO NOT EDIT.
// source: my_proto/camera_streaming.proto

package camera_streaming

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageRequest struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageRequest) Reset()         { *m = ImageRequest{} }
func (m *ImageRequest) String() string { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()    {}
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe8922db878252a, []int{0}
}

func (m *ImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageRequest.Unmarshal(m, b)
}
func (m *ImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageRequest.Marshal(b, m, deterministic)
}
func (m *ImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRequest.Merge(m, src)
}
func (m *ImageRequest) XXX_Size() int {
	return xxx_messageInfo_ImageRequest.Size(m)
}
func (m *ImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRequest proto.InternalMessageInfo

func (m *ImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageReply struct {
	Reply                int32    `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageReply) Reset()         { *m = ImageReply{} }
func (m *ImageReply) String() string { return proto.CompactTextString(m) }
func (*ImageReply) ProtoMessage()    {}
func (*ImageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_efe8922db878252a, []int{1}
}

func (m *ImageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageReply.Unmarshal(m, b)
}
func (m *ImageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageReply.Marshal(b, m, deterministic)
}
func (m *ImageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageReply.Merge(m, src)
}
func (m *ImageReply) XXX_Size() int {
	return xxx_messageInfo_ImageReply.Size(m)
}
func (m *ImageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageReply.DiscardUnknown(m)
}

var xxx_messageInfo_ImageReply proto.InternalMessageInfo

func (m *ImageReply) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func init() {
	proto.RegisterType((*ImageRequest)(nil), "ImageRequest")
	proto.RegisterType((*ImageReply)(nil), "ImageReply")
}

func init() { proto.RegisterFile("my_proto/camera_streaming.proto", fileDescriptor_efe8922db878252a) }

var fileDescriptor_efe8922db878252a = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcf, 0xad, 0x8c, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x4e, 0xcc, 0x4d, 0x2d, 0x4a, 0x8c, 0x2f, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0xd7, 0x03, 0x0b, 0x2b, 0xa9, 0x70, 0xf1, 0x78, 0xe6, 0x26, 0xa6,
	0xa7, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x70, 0xb1, 0x66, 0x82, 0xf8, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x10, 0x8e, 0x92, 0x12, 0x17, 0x17, 0x54, 0x55, 0x41, 0x4e,
	0x25, 0x48, 0x4d, 0x11, 0x88, 0x01, 0x56, 0xc3, 0x1a, 0x04, 0xe1, 0x18, 0x99, 0x72, 0xb1, 0x39,
	0x83, 0xed, 0x10, 0xd2, 0xe6, 0x62, 0x77, 0xcc, 0x4b, 0xcc, 0xa9, 0x2c, 0x4e, 0x15, 0xe2, 0xd5,
	0x43, 0x36, 0x5d, 0x8a, 0x5b, 0x0f, 0x61, 0x8c, 0x12, 0x83, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b,
	0xd8, 0x1d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x5e, 0xb3, 0x28, 0xaa, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	Analyse(ctx context.Context, opts ...grpc.CallOption) (Camera_AnalyseClient, error)
}

type cameraClient struct {
	cc *grpc.ClientConn
}

func NewCameraClient(cc *grpc.ClientConn) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) Analyse(ctx context.Context, opts ...grpc.CallOption) (Camera_AnalyseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Camera_serviceDesc.Streams[0], "/Camera/Analyse", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraAnalyseClient{stream}
	return x, nil
}

type Camera_AnalyseClient interface {
	Send(*ImageRequest) error
	Recv() (*ImageReply, error)
	grpc.ClientStream
}

type cameraAnalyseClient struct {
	grpc.ClientStream
}

func (x *cameraAnalyseClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cameraAnalyseClient) Recv() (*ImageReply, error) {
	m := new(ImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	Analyse(Camera_AnalyseServer) error
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_Analyse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CameraServer).Analyse(&cameraAnalyseServer{stream})
}

type Camera_AnalyseServer interface {
	Send(*ImageReply) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type cameraAnalyseServer struct {
	grpc.ServerStream
}

func (x *cameraAnalyseServer) Send(m *ImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cameraAnalyseServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Camera",
	HandlerType: (*CameraServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Analyse",
			Handler:       _Camera_Analyse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "my_proto/camera_streaming.proto",
}
